#
# Antelope rtexec.pf file
# Managed by Salt. MANUAL CHANGES MAY BE OVERRIDDEN!!
#

# The execution line is run under a shell, so special shell 
# characters like '*' should be enclosed in quotes, unless you intend
# they be expanded.

# Only processes which are named and have a non-zero value in the Run array below
# are actually started.
# 
Processes &Tbl{
{%- for line in Processes %}
{{ line }}
{%- endfor %}
}

# Only tasks which have a non-zero value in the following list are
# actually run.
Run     &Arr{
{%- for key, arg in Run.iteritems() %}
{{ key }} {{ arg }}
{%- endfor %}
}

# Automatically restart the following tasks if the 
# corresponding parameter file(s) changes
Pf_restart      &Tbl{
{%- for line in Pf_restart %}
{{ line }}
{%- endfor %}
}

# The definitions from Defines are substituted into the environment variables 
# and commands below. For example, $ANTELOPE in an environment definition or 
# command line below will become the value of ANTELOPE from the array Defines.

# Please don't change the names for ANTELOPE, ORB, or DB in Defines; 
# other programs (like rtm) use these variables.  If you change DB to MYDB, 
# rtm will no longer have a useful menu item for running dbe on the database.

Defines &Arr{  
{%- for key, arg in Defines.iteritems() %}
{{ key }} {{ arg }}
{%- endfor %}
}

# The following parameters define the environment in which processes
# will execute.  All other environment variables will be eliminated.
Env     &Arr{
{%- for key, arg in Env.iteritems() %}
{{ key }} {{ arg }}
{%- endfor %}
}

# The Processes list specifies the names and execution lines for each
# subprocess which can be run by rtexec.

# Processes are started in the same order as in the Processes list below.
# While starting processes, rtexec waits Start_period seconds between
# running each process; this is useful when later processes are dependent
# on earlier ones.
Start_period  {{ Start_period }} 

# When a process dies, rtexec restarts it automatically; however it 
# also enforces a "cooling off" period of Minimum_period_between_starts.
Minimum_period_between_starts  {{ Minimum_period_between_starts }}

# Under some circumstances (like misconfiguration or hardware problems), 
# a process may die repeatedly.  The following parameters define 
# an approach to squelching the resultant flurry of activity in the 
# logs and perhaps in email.

# When a process repeatedly dies in times less than the threshold, 
# the period between restarts is repeatedly doubled.
Failure_threshold  {{ Failure_threshold }}

# After so many failure repetitions, the period between restarts is 
# set to the retry period.  mail is sent to anyone specified in
# the startup_shutdown_email parameter.
Failure_repetitions  {{ Failure_repetitions }}
Failure_retry_period  {{ Failure_retry_period }}

# During shutdown, send kill signals to processes in the order named
# in Shutdown_order list.  Each line can contain multiple processes, which 
# will be killed concurrently.  All these processes will have died
# or been sent kill -9 signals before later processes are sent signals.
#
# Usually, one should shut down processes which read from the orb, 
# then processes which write to the orb, and finally, the orbserver itself.
#
# Processes not listed in the Shutdown table are the last to be sent signals.
#
# orbserver is usually the last process to be killed.
Shutdown_order &Tbl{
{%- for line in Shutdown_order %}
{{ line }}
{%- endfor %}
}
#cdorb2db orb2db orb2dbt orbdetect orbassoc magnitudes dborigin2orb orb2logs orb2disk
#dbidserver orb2orb qt2orb q3302orb dlcollector
#tcpserver tcpmonitor 
#diskserver

# This array names tasks which cause rtexec to terminate 
# when they die; the corresponding value is the number of
# seconds rtexec waits before shutting down.
Shutdown_when_task_dies	&Arr{
{%- for key, arg in Shutdown_when_task_dies.iteritems() %}
{{ key }} {{ arg }}
{%- endfor %}
}

# set this parameter to a list of email addresses which will receive
# email automatically when the system is started or stopped.
startup_shutdown_email  {{ startup_shutdown_email }}

# resource problems
status_email {{ status_email }}

Startup_tasks   &Tbl{
# These are one-shot processes to be run when rtexec first starts.
# The format is the same as in the process table: a task name, followed by the execution line
{%- for line in Startup_tasks %}
{{ line }}
{%- endfor %}
}

Shutdown_tasks  &Tbl{
# These are one-shot processes to be run when rtexec is shutting down.
# The format is the same as in the process table: a task name, followed by the execution line
{%- for line in Shutdown_tasks %}
{{ line }}
{%- endfor %}
}

max_cron_gap  {{ max_cron_gap }}
                        # maximum time gap which the rtexec cron will fill
                        # i.e., cron jobs which would have run during the 
                        # max_cron_gap seconds while rtexec was down for 
                        # some reason (e.g., maintenance) will be run when 
                        # rtexec is restarted.

crontab &Arr{
# These cron jobs are actually run by rtexec.
# Their environment is the same as the rtexec environment.
# stdout and stderr are redirected to logs/name. 
#
#  task    UTC/LOCAL Min Hr Day Month DayOfWeek  Command

# report on rt system status and data return
## sysreport  UTC     0   3  *    *       *      rtsys -v -m rt@localhost -p
## datareport UTC    30   3  *    *       *      rtreport -z -v -m rt@localhost

# backup the waveforms and database
## rtbackup   UTC    00   5  *    *       *      rtbackup  -v -m rt@localhost $DB /dev/rmt/0n

# remove old waveform files and old database rows
## rtdbclean  UTC    45   5  *    *       *      rtdbclean -v -m rt@localhost $DB

# remove old files from directory week
## cleartmp   LOCAL   5   1  *    *       *      cleartmp week 7

# clean up log files
## cleanlogs   LOCAL   5   1  *    *       *      truncate_log -r logs/*

# send mail if patches are available from BRTT
{%- for key, arg in crontab.iteritems() %}
    {{ key }} {{ arg }}
{%- endfor %}
}

# rtexec gives processes this much time to quit on their
# own after a signal ; then it sends a kill -9 
Time_to_die  {{ Time_to_die }}

# The following are the process resource limits 
Limit   &Arr{
{%- for key, arg in Limit.iteritems() %}
{{ key }} {{ arg }}
{%- endfor %}
}

umask  {{ umask }}

# rtexec keeps some statistics in this database
Database {{ Database }}

# When a program dies due to a segmentation violation
# or bus error, an incident report is generated.  
# email_incident_reports may be set to a list of recipients 
# who will get these reports by email.  BRTT likes to receive
# reports if a standard Antelope program dies this way.
email_incident_reports  {{ email_incident_reports }}

# if include_corefile is "yes", any corefile generated will be 
# sent via email also.
include_corefile  {{ include_corefile }}

Chatter_limit {{ Chatter_limit }}  # minimum gap between messages
Maximum_memory_in_use {{ Maximum_memory_in_use }}  # warn when maximum memory in use exceeds this proportion of physical memory

disks   &Tbl{
# name    file  minfree_Mbytes min_kinodes description
{%- for line in disks %}
{{ line }}
{%- endfor %}
}

####################################################################
# rtm Parameters
# The following parameters are not used directly by rtexec, but
# are instead read and used by rtm.
####################################################################

Buttons &Tbl{  # Use {} instead of '' to conform to tcl's quoting
{%- for line in Buttons %}
{{ line }}
{%- endfor %}
}

# Other files to add to edit menu
Edit_files &Tbl{
{%- for line in Edit_files %}
{{ line }}
{%- endfor %}
}

Parameter_files &Arr{   # if the parameter file doesn't follow the convention
                        # of being named after either the task name or 
                        # the program name, it should be specified here, so
                        # that rtm can allow editing it.
{%- for key, arg in Parameter_files.iteritems() %}
{{ key }} {{ arg }}
{%- endfor %}
}

# The following are tasks which talk to the data orbserver, and
# which therefore should have an input and output bar on the 
# Processing Tasks panel of rtm.
orbtasks &Arr{
{%- for line in orbtasks %}
{{ line }}
{%- endfor %}
}

title  {{ title }} # alternate location to specify rtm title
network_code {{ network_code }}  # network code for rtreport and rtsys


pf_revision_time {{ pf_revision_time }}
